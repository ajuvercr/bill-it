package seacoalCo.bill_it.camera;

import android.graphics.Color;
import android.os.Bundle;
import android.support.design.widget.Snackbar;
import android.support.v4.app.NavUtils;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.support.v7.widget.helper.ItemTouchHelper;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Toast;

import java.util.ArrayList;
import java.util.List;

import seacoalCo.bill_it.R;
import seacoalCo.bill_it.camera.custom_views.ItemAdapter;
import seacoalCo.bill_it.logics.group.Group;
import seacoalCo.bill_it.logics.item.Item;

public class ImageActivity extends AppCompatActivity {

    RecyclerView recyclerView;
    ArrayList<ItemDraft> items;
    ItemDraft deletedItem;

    int deletedPos;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_image);

        Toolbar toolbar = findViewById(R.id.done_toolbar);
        setSupportActionBar(toolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);

        recyclerView = findViewById(R.id.recyclerView);

        if (savedInstanceState != null && savedInstanceState.containsKey("items")) {
            items = savedInstanceState.getParcelableArrayList("items");
            createHelper();
        // If items would be generated by the camera preview
        } else if (this.getIntent().getExtras() != null && this.getIntent().getExtras().containsKey("items")) {
            items = this.getIntent().getExtras().getParcelableArrayList("items");
            createHelper();
        }
    }

    // Recycleview inladen
    private void createHelper() {
        RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);
        final ItemAdapter adapter = new ItemAdapter(items);
        recyclerView.setLayoutManager(layoutManager);
        recyclerView.setAdapter(adapter);

        // Swipe delete behaviour initialiseren.
        ItemTouchHelper swipeDeleteHelper = new ItemTouchHelper(new ItemTouchHelper.SimpleCallback(
                ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT, ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT) {
            @Override
            public boolean onMove(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, RecyclerView.ViewHolder target) {
                return false;
            }

            // Behaviour definiëren.
            @Override
            public void onSwiped(RecyclerView.ViewHolder viewHolder, int direction) {
                deletedPos = viewHolder.getAdapterPosition();
                deletedItem = items.remove(viewHolder.getAdapterPosition());
                adapter.notifyItemRemoved(viewHolder.getAdapterPosition());
                buildSnack(adapter).show();
            }
        });
        swipeDeleteHelper.attachToRecyclerView(recyclerView);

        // Hulp bij delete tonen
        Toast toast = Toast.makeText(getApplicationContext(), R.string.im_act_message, Toast.LENGTH_SHORT);
        toast.show();
    }

    // Lijst van itemdrafts omzetten in lijst van items
    public static List<Item> buildItems(List<ItemDraft> drafts) {
        List<Item> items = new ArrayList<>();
        for (ItemDraft draft : drafts) {
            items.addAll(draft.buildItem());
        }
        return items;
    }

    // State opslaan bij oriëntatie verandering
    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putParcelableArrayList("items", items);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.actionbar_done, menu);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.action_menu_done:
                onDone();
                return true;
            case R.id.home:
                NavUtils.navigateUpFromSameTask(this);
                return true;
        }
        return super.onOptionsItemSelected(item);
    }

    // Beëindigen van activity en resultaat doorsturen
    public void onDone() {
        Group g = Group.getCurrentGroup();
        for (ItemDraft id : items) {
            g.addAllItems(id.buildItem());
        }
        finish();
    }

    // Snackbar maken wanneer item verwijderd wordt met undo knop
    private Snackbar buildSnack(final ItemAdapter adapter) {
        return Snackbar.make(findViewById(R.id.snackContainer), R.string.item_delete, Snackbar.LENGTH_INDEFINITE)
                .setAction("UNDO", new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        items.add(deletedPos, deletedItem);
                        deletedItem = null;
                        adapter.notifyItemInserted(deletedPos);
                    }
                })
                .setActionTextColor(Color.CYAN);
    }
}
